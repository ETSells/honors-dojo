#!/usr/bin/exec-suid -- /usr/local/bin/python -I

import time
import subprocess
import os
import pwd
import sys
import glob
import stat

# Standard ANSI escape codes for colored text.
# Example: text_colors[green]
text_colors = {
    'green':    '\033[92m',
    'cyan':     '\033[96m',
    'yellow':   '\033[93m', # could show up as orange
    'red':      '\033[91m',
    'dflt':     '\033[0m'
}

# https://stackoverflow.com/questions/1770209/run-child-processes-as-different-user-from-a-long-running-python-process/6037494#6037494
def demote_workflow(user_uid, user_gid):
    def result():
        os.setgid(user_gid)
        os.setuid(user_uid)
    return result

# Run the subprocess as a second user (running as root could allow catting the flag, and running as the
# user prevents us from doing any necessary permissions shenanigans for challenges)
def run_workflow() -> int:
    os.chdir("/challenge/repository")
    pw_record = pwd.getpwnam("devops_runner")
    user_name      = pw_record.pw_name
    user_uid       = pw_record.pw_uid
    user_gid       = pw_record.pw_gid
    os.initgroups(user_name, user_gid)

    env = {
    "PATH": "/usr/local/bin/act:/run/challenge/bin:/run/dojo/bin:/root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
    "HOME": "/home/devops_runner",
    "USER": "devops_runner",
    }

    command = ["act", "push", "-P", "ubuntu-latest=-self-hosted"]
    try:
        subpro = subprocess.Popen(command, preexec_fn=demote_workflow(user_uid, user_gid), cwd='/challenge/repository', env=env)
        result = subpro.wait()
        return result
    except Exception as e:
        print("Exception during subprocess spawning: " + e)
        return -1

def chal_pass() -> None:
    print(text_colors['green'] + "The workflow has completed as expected. Great job! Here's your flag:")
    with open("/flag") as f:
        print(text_colors['dflt'] + f.read())

def chal_fail(err: str) -> None:
    print(text_colors['red'] + "The workflow has failed.")
    print(err)

# Print character-by-character to console (simulates typing).
def slow_print(text: str, delay: float) -> None:
    for c in text:
        print(c, end="", flush=True)
        time.sleep(delay)
        

# Entry Point

slow_print("git commit -m \"ops: Updated CI\"\n", 0.05)
print("[main a20d5d7] ops: Updated CI")
print("1 file changed, a couple of lines changed idk i'm not gonna spawn a subprocess to check this\n")
slow_print("git push\n", 0.05)
print("Simulating CI run...")

result = run_workflow()
if( result==0 ):
    print("Great job! Your workflow has exited successfully. You should see the flag above.")
else:
    chal_fail(str(result))